# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import server_pb2 as server__pb2


class CurrentTimestampStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getCurrentTime = channel.unary_unary(
                '/CurrentTimestamp/getCurrentTime',
                request_serializer=server__pb2.TimeRequest.SerializeToString,
                response_deserializer=server__pb2.TimeResponse.FromString,
                )
        self.sayHello = channel.unary_unary(
                '/CurrentTimestamp/sayHello',
                request_serializer=server__pb2.HelloRequest.SerializeToString,
                response_deserializer=server__pb2.HelloResponse.FromString,
                )


class CurrentTimestampServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getCurrentTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sayHello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CurrentTimestampServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getCurrentTime': grpc.unary_unary_rpc_method_handler(
                    servicer.getCurrentTime,
                    request_deserializer=server__pb2.TimeRequest.FromString,
                    response_serializer=server__pb2.TimeResponse.SerializeToString,
            ),
            'sayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.sayHello,
                    request_deserializer=server__pb2.HelloRequest.FromString,
                    response_serializer=server__pb2.HelloResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CurrentTimestamp', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CurrentTimestamp(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getCurrentTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CurrentTimestamp/getCurrentTime',
            server__pb2.TimeRequest.SerializeToString,
            server__pb2.TimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CurrentTimestamp/sayHello',
            server__pb2.HelloRequest.SerializeToString,
            server__pb2.HelloResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GuessCountryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.geo = channel.stream_stream(
                '/GuessCountry/geo',
                request_serializer=server__pb2.GeoRequest.SerializeToString,
                response_deserializer=server__pb2.GeoResponse.FromString,
                )


class GuessCountryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def geo(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GuessCountryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'geo': grpc.stream_stream_rpc_method_handler(
                    servicer.geo,
                    request_deserializer=server__pb2.GeoRequest.FromString,
                    response_serializer=server__pb2.GeoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GuessCountry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GuessCountry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def geo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/GuessCountry/geo',
            server__pb2.GeoRequest.SerializeToString,
            server__pb2.GeoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
